{"version":3,"file":"js/474.d3be655f.js","mappings":"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","sources":["webpack://amiyabot-console/./src/components/v-form-dialog.vue?2b2f","webpack://amiyabot-console/./src/components/v-form-dialog.vue","webpack://amiyabot-console/./src/components/v-form-dialog.vue?3adc","webpack://amiyabot-console/../../../../packages/tokens/dialog.ts","webpack://amiyabot-console/../../../../../packages/utils/vue/refs.ts","webpack://amiyabot-console/../../../../../packages/components/dialog/src/dialog-content.vue","webpack://amiyabot-console/../../../../../packages/components/dialog/src/dialog.vue","webpack://amiyabot-console/../../../../../packages/components/dialog/index.ts","webpack://amiyabot-console/../../../../../packages/components/dialog/src/dialog-content.ts","webpack://amiyabot-console/../../../../../packages/components/dialog/src/dialog.ts","webpack://amiyabot-console/../../../../../packages/components/dialog/src/use-dialog.ts"],"sourcesContent":["import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_form = _resolveComponent(\"el-form\");\n\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    modelValue: _ctx.dialogVisible,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.dialogVisible = $event),\n    title: _ctx.title,\n    \"append-to-body\": _ctx.appendToBody,\n    width: _ctx.width\n  }, {\n    footer: _withCtx(() => [_renderSlot(_ctx.$slots, \"footer\")]),\n    default: _withCtx(() => [_createVNode(_component_el_form, {\n      model: _ctx.form,\n      \"label-width\": _ctx.labelWidth\n    }, {\n      default: _withCtx(() => [_renderSlot(_ctx.$slots, \"default\")]),\n      _: 3\n    }, 8, [\"model\", \"label-width\"])]),\n    _: 3\n  }, 8, [\"modelValue\", \"title\", \"append-to-body\", \"width\"]);\n}","import _defineProperty from \"/home/runner/work/Amiya-Bot-console2/Amiya-Bot-console2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Options, Vue } from 'vue-class-component';\nlet VFormDialog = class VFormDialog extends Vue {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"form\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"labelWidth\", void 0);\n\n    _defineProperty(this, \"dialogVisible\", false);\n  }\n\n  show() {\n    this.dialogVisible = true;\n  }\n\n  hide() {\n    this.dialogVisible = false;\n  }\n\n};\nVFormDialog = __decorate([Options({\n  props: {\n    form: Object,\n    title: String,\n    width: Number,\n    appendToBody: Boolean,\n    labelWidth: {\n      type: String,\n      default: () => '100px'\n    }\n  }\n})], VFormDialog);\nexport default VFormDialog;","/* unplugin-vue-components disabled */import { render } from \"./v-form-dialog.vue?vue&type=template&id=2bf567d4&ts=true\"\nimport script from \"./v-form-dialog.vue?vue&type=script&lang=ts\"\nexport * from \"./v-form-dialog.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/runner/work/Amiya-Bot-console2/Amiya-Bot-console2/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import type { CSSProperties, ComputedRef, InjectionKey, Ref } from 'vue'\nimport type { useNamespace } from '@element-plus/hooks'\n\nexport type DialogContext = {\n  dialogRef: Ref<HTMLElement | undefined>\n  headerRef: Ref<HTMLElement | undefined>\n  bodyId: Ref<string>\n  ns: ReturnType<typeof useNamespace>\n  rendered: Ref<boolean>\n  style: ComputedRef<CSSProperties>\n}\n\nexport const dialogInjectionKey: InjectionKey<DialogContext> =\n  Symbol('dialogInjectionKey')\n","import { isFunction } from '../types'\n\nimport type { ComponentPublicInstance, Ref } from 'vue'\n\nexport type RefSetter = (\n  el: Element | ComponentPublicInstance | undefined\n) => void\n\nexport const composeRefs = (\n  ...refs: (Ref<HTMLElement | undefined> | RefSetter)[]\n) => {\n  return (el: Element | ComponentPublicInstance | null) => {\n    refs.forEach((ref) => {\n      if (isFunction(ref)) {\n        ref(el as Element | ComponentPublicInstance)\n      } else {\n        ref.value = el as HTMLElement | undefined\n      }\n    })\n  }\n}\n","<template>\n  <div\n    :ref=\"composedDialogRef\"\n    :class=\"[\n      ns.b(),\n      ns.is('fullscreen', fullscreen),\n      ns.is('draggable', draggable),\n      { [ns.m('center')]: center },\n      customClass,\n    ]\"\n    :style=\"style\"\n    tabindex=\"-1\"\n    @click.stop\n  >\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n","<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\nimport Dialog from './src/dialog.vue'\n\nexport const ElDialog = withInstall(Dialog)\nexport default ElDialog\n\nexport * from './src/use-dialog'\nexport * from './src/dialog'\n","import { buildProps, iconPropType } from '@element-plus/utils'\n\nexport const dialogContentProps = buildProps({\n  center: {\n    type: Boolean,\n    default: false,\n  },\n  closeIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  customClass: {\n    type: String,\n    default: '',\n  },\n  draggable: {\n    type: Boolean,\n    default: false,\n  },\n  fullscreen: {\n    type: Boolean,\n    default: false,\n  },\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  title: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport const dialogContentEmits = {\n  close: () => true,\n}\n","import { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { dialogContentProps } from './dialog-content'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype DoneFn = (cancel?: boolean) => void\nexport type DialogBeforeCloseFn = (done: DoneFn) => void\n\nexport const dialogProps = buildProps({\n  ...dialogContentProps,\n  appendToBody: {\n    type: Boolean,\n    default: false,\n  },\n  beforeClose: {\n    type: definePropType<DialogBeforeCloseFn>(Function),\n  },\n  destroyOnClose: {\n    type: Boolean,\n    default: false,\n  },\n  closeOnClickModal: {\n    type: Boolean,\n    default: true,\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true,\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true,\n  },\n  modal: {\n    type: Boolean,\n    default: true,\n  },\n  openDelay: {\n    type: Number,\n    default: 0,\n  },\n  closeDelay: {\n    type: Number,\n    default: 0,\n  },\n  top: {\n    type: String,\n  },\n  modelValue: {\n    type: Boolean,\n    default: false,\n  },\n  modalClass: String,\n  width: {\n    type: [String, Number],\n  },\n  zIndex: {\n    type: Number,\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type DialogProps = ExtractPropTypes<typeof dialogProps>\n\nexport const dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value: boolean) => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true,\n}\nexport type DialogEmits = typeof dialogEmits\n","import {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isClient, useTimeoutFn } from '@vueuse/core'\n\nimport {\n  defaultNamespace,\n  useGlobalConfig,\n  useId,\n  useLockscreen,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { addUnit } from '@element-plus/utils'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const instance = getCurrentInstance()!\n  const emit = instance.emit as SetupContext<DialogEmits>['emit']\n  const { nextZIndex } = useZIndex()\n\n  let lastPosition = ''\n  const titleId = useId()\n  const bodyId = useId()\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--${namespace.value}-dialog` as const\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = addUnit(props.width)\n      }\n    }\n    return style\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel?: boolean) {\n      if (shouldCancel) return\n      closed.value = true\n      visible.value = false\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  function onOpenAutoFocus() {\n    emit('openAutoFocus')\n  }\n\n  function onCloseAutoFocus() {\n    emit('closeAutoFocus')\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose()\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        emit('open')\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onCloseRequested,\n    titleId,\n    bodyId,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_el_form","_component_el_dialog","modelValue","dialogVisible","$event","title","appendToBody","width","footer","$slots","default","model","form","labelWidth","_","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","VFormDialog","constructor","args","super","this","show","hide","props","String","Number","Boolean","type","__exports__","dialogInjectionKey","Symbol","composeRefs","refs","el","forEach","ref","isFunction","value","t","Close","dialogRef","headerRef","bodyId","ns","style","focusTrapRef","composedDialogRef","draggable","useDraggable","slots","useDeprecated","scope","from","replacement","version","computed","dialogContentRef","visible","titleId","rendered","zIndex","afterEnter","afterLeave","beforeLeave","handleClose","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","useDialog","provide","overlayEvent","fullscreen","expose","ElDialog","withInstall","Dialog","dialogContentProps","buildProps","center","closeIcon","iconPropType","customClass","showClose","dialogContentEmits","close","dialogProps","beforeClose","definePropType","Function","destroyOnClose","closeOnClickModal","closeOnPressEscape","lockScroll","modal","openDelay","closeDelay","top","modalClass","trapFocus","dialogEmits","open","opened","closed","UPDATE_MODEL_EVENT","isBoolean","openAutoFocus","closeAutoFocus","targetRef","instance","getCurrentInstance","emit","nextZIndex","useZIndex","lastPosition","useId","openTimer","closeTimer","namespace","useGlobalConfig","defaultNamespace","style2","varPrefix","addUnit","stop","useTimeoutFn","doOpen","doClose","shouldCancel","isClient","useLockscreen","watch","val","nextTick","scrollTop","transform","onMounted"],"sourceRoot":""}